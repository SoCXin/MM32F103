; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\usbreg.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\usbreg.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\bsp -I..\bsp\test -I..\bsp\usblib -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\uart -I..\..\..\..\..\Device\MM32F103\Include -I..\HARDWARE\KEY -I..\..\..\..\..\Device\CMSIS\KEIL_CORE -IF:\work\8月\F103n、F031n样例制作\MM32F103RegLib_MiniBoard_Ver1.0.0\MM32F103RegLib_MiniBoard_libReg\MBF103PF_reg\USB\USB_Keyboard\KEIL_PRJ\RTE\_projectgroup -IC:\Keil_v5\ARM\PACK\MindMotion\MM32F103_DFP\1.4.3\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\PACK\MindMotion\MM32L3xx_DFP\1.0.3\Device\MM32L3xx\Include -D__UVISION_VERSION=522 -DMM32F103CBT -DF103_N_VERSION --omf_browse=.\objects\usbreg.crf ..\bsp\usblib\usbreg.c]
                          THUMB

                          AREA ||i.Read_Mreg32||, CODE, READONLY, ALIGN=1

                  Read_Mreg32 PROC
;;;191    
;;;192    uint32 Read_Mreg32( uint32 mreg)
000000  4601              MOV      r1,r0
;;;193    {
;;;194        return(*(volatile uint32 *)mreg);		
000002  6808              LDR      r0,[r1,#0]
;;;195    }
000004  4770              BX       lr
;;;196    
                          ENDP


                          AREA ||i.USB_HP_CAN1_TX_IRQHandler||, CODE, READONLY, ALIGN=2

                  USB_HP_CAN1_TX_IRQHandler PROC
;;;47     
;;;48     void USB_HP_CAN1_TX_IRQHandler(void) 
000000  b510              PUSH     {r4,lr}
;;;49     #ifdef USE_IAR
;;;50     #else
;;;51     #ifdef USB_INTR_MODE
;;;52     __irq
;;;53     #endif 
;;;54     #endif 
;;;55     {
;;;56         temp = USB->rINT_STATE ;
000002  4894              LDR      r0,|L2.596|
000004  6800              LDR      r0,[r0,#0]
000006  4994              LDR      r1,|L2.600|
000008  6008              STR      r0,[r1,#0]  ; temp
;;;57         USB->rINT_STATE = temp;
00000a  4608              MOV      r0,r1
00000c  6800              LDR      r0,[r0,#0]  ; temp
00000e  4991              LDR      r1,|L2.596|
000010  6008              STR      r0,[r1,#0]
;;;58         if(temp&USB_INT_STATE_EPINTF)										//端点中断
000012  4891              LDR      r0,|L2.600|
000014  7800              LDRB     r0,[r0,#0]  ; temp
000016  f0000010          AND      r0,r0,#0x10
00001a  2800              CMP      r0,#0
00001c  d07e              BEQ      |L2.284|
;;;59         {
;;;60             
;;;61             temp_ep=USB->rEP_INT_STATE;
00001e  1d08              ADDS     r0,r1,#4
000020  6800              LDR      r0,[r0,#0]
000022  498e              LDR      r1,|L2.604|
000024  6008              STR      r0,[r1,#0]  ; temp_ep
;;;62             
;;;63             USB->rEP_INT_STATE = temp_ep;
000026  4608              MOV      r0,r1
000028  6800              LDR      r0,[r0,#0]  ; temp_ep
00002a  498a              LDR      r1,|L2.596|
00002c  1d09              ADDS     r1,r1,#4
00002e  6008              STR      r0,[r1,#0]
;;;64             if(temp_ep&EP_INT_STATE_EP0F )									//端点0中断
000030  488a              LDR      r0,|L2.604|
000032  7800              LDRB     r0,[r0,#0]  ; temp_ep
000034  f0000001          AND      r0,r0,#1
000038  2800              CMP      r0,#0
00003a  d04c              BEQ      |L2.214|
;;;65             {
;;;66                 //GPIO_SetBits(GPIOA, GPIO_Pin_5);					//用于触发
;;;67                 usb_ep_flag=USB_EP0;
00003c  2000              MOVS     r0,#0
00003e  4988              LDR      r1,|L2.608|
000040  7008              STRB     r0,[r1,#0]
;;;68                 
;;;69                 temp_epn = USB->rEP0_INT_STATE;
000042  4884              LDR      r0,|L2.596|
000044  3008              ADDS     r0,r0,#8
000046  6800              LDR      r0,[r0,#0]
000048  4986              LDR      r1,|L2.612|
00004a  6008              STR      r0,[r1,#0]  ; temp_epn
;;;70                 
;;;71                 USB->rEP0_INT_STATE = temp_epn;
00004c  4608              MOV      r0,r1
00004e  6800              LDR      r0,[r0,#0]  ; temp_epn
000050  4980              LDR      r1,|L2.596|
000052  3108              ADDS     r1,r1,#8
000054  6008              STR      r0,[r1,#0]
;;;72                 
;;;73                 if(temp_epn&EPn_INT_STATE_SETUP)							//SETUP中断
000056  4883              LDR      r0,|L2.612|
000058  7800              LDRB     r0,[r0,#0]  ; temp_epn
00005a  f0000001          AND      r0,r0,#1
00005e  b130              CBZ      r0,|L2.110|
;;;74                 {
;;;75                     usb_setup_flag = TRUE;
000060  2001              MOVS     r0,#1
000062  4981              LDR      r1,|L2.616|
000064  7008              STRB     r0,[r1,#0]
;;;76                     if(USB_SEND_OPEN_STALL[0]==TRUE)						//端点停止
000066  4881              LDR      r0,|L2.620|
000068  7800              LDRB     r0,[r0,#0]  ; USB_SEND_OPEN_STALL
;;;77                     {
;;;78                     }
;;;79                     usb_setup_handle();										//setup包处理
00006a  f7fffffe          BL       usb_setup_handle
                  |L2.110|
;;;80                 }
;;;81                 if(temp_epn&EPn_INT_STATE_INNACK)							//IN包非应答中断，准备写入数据
00006e  487d              LDR      r0,|L2.612|
000070  7800              LDRB     r0,[r0,#0]  ; temp_epn
000072  f0000004          AND      r0,r0,#4
000076  b160              CBZ      r0,|L2.146|
;;;82                 {
;;;83                     usb_in_flag = TRUE;
000078  2001              MOVS     r0,#1
00007a  497d              LDR      r1,|L2.624|
00007c  7008              STRB     r0,[r1,#0]
;;;84                     usb_in_handle();										//IN包处理
00007e  f7fffffe          BL       usb_in_handle
;;;85                     
;;;86                     USB->rEP0_INT_STATE = EPn_INT_STATE_INNACK;				//清端点中断
000082  2004              MOVS     r0,#4
000084  4973              LDR      r1,|L2.596|
000086  3108              ADDS     r1,r1,#8
000088  6008              STR      r0,[r1,#0]
;;;87                     USB->rEP0_INT_EN = EPn_INT_STATE_END|EPn_INT_STATE_INNACK|EPn_INT_STATE_OUTACK|EPn_INT_STATE_OUTSTALL|EPn_INT_STATE_INSTALL;// EP_IN_NACK;
00008a  20d6              MOVS     r0,#0xd6
00008c  4971              LDR      r1,|L2.596|
00008e  3114              ADDS     r1,r1,#0x14
000090  6008              STR      r0,[r1,#0]
                  |L2.146|
;;;88                 }
;;;89                 if(temp_epn&EPn_INT_STATE_OUTACK)							//OUT包应答中断，收到数据
000092  4874              LDR      r0,|L2.612|
000094  7800              LDRB     r0,[r0,#0]  ; temp_epn
000096  f0000040          AND      r0,r0,#0x40
00009a  b120              CBZ      r0,|L2.166|
;;;90                 {
;;;91                     usb_out_flag = TRUE;	
00009c  2001              MOVS     r0,#1
00009e  4975              LDR      r1,|L2.628|
0000a0  7008              STRB     r0,[r1,#0]
;;;92                     usb_out_handle();										//OUT包处理	
0000a2  f7fffffe          BL       usb_out_handle
                  |L2.166|
;;;93                 }				
;;;94                 if(temp_epn&(EPn_INT_EN_OUTSTALLIE|EPn_INT_EN_INSTALLIE))
0000a6  486f              LDR      r0,|L2.612|
0000a8  7800              LDRB     r0,[r0,#0]  ; temp_epn
0000aa  f0000090          AND      r0,r0,#0x90
0000ae  b110              CBZ      r0,|L2.182|
;;;95                 {			
;;;96                     USB_EP_STALL[0] = TRUE;	
0000b0  2001              MOVS     r0,#1
0000b2  4971              LDR      r1,|L2.632|
0000b4  7008              STRB     r0,[r1,#0]
                  |L2.182|
;;;97                 }
;;;98                 if(temp_epn&EPn_INT_STATE_INSTALL)
0000b6  486b              LDR      r0,|L2.612|
0000b8  7800              LDRB     r0,[r0,#0]  ; temp_epn
0000ba  f0000010          AND      r0,r0,#0x10
0000be  b110              CBZ      r0,|L2.198|
;;;99                 {			
;;;100                    USB_EP_IN_STALL[0] = TRUE;			
0000c0  2001              MOVS     r0,#1
0000c2  496e              LDR      r1,|L2.636|
0000c4  7008              STRB     r0,[r1,#0]
                  |L2.198|
;;;101                }
;;;102                if(temp_epn&EPn_INT_STATE_OUTSTALL)
0000c6  4867              LDR      r0,|L2.612|
0000c8  7800              LDRB     r0,[r0,#0]  ; temp_epn
0000ca  f0000080          AND      r0,r0,#0x80
0000ce  b110              CBZ      r0,|L2.214|
;;;103                {			
;;;104                    USB_EP_OUT_STALL[0] = TRUE;	
0000d0  2001              MOVS     r0,#1
0000d2  496b              LDR      r1,|L2.640|
0000d4  7008              STRB     r0,[r1,#0]
                  |L2.214|
;;;105                }
;;;106            }		
;;;107    #if ((EPOUT!=EPIN))	 													//if epin != epout,
;;;108            if(temp_ep&EPn_INT(EPOUT))										//输出端点号中断
0000d6  4861              LDR      r0,|L2.604|
0000d8  7800              LDRB     r0,[r0,#0]  ; temp_ep
0000da  f0000004          AND      r0,r0,#4
0000de  2800              CMP      r0,#0
0000e0  d04a              BEQ      |L2.376|
;;;109            {
;;;110                usb_ep_flag=USB_EPn(EPOUT);
0000e2  2002              MOVS     r0,#2
0000e4  495e              LDR      r1,|L2.608|
0000e6  7008              STRB     r0,[r1,#0]
;;;111                
;;;112                temp_epn = USB->rEP2_INT_STATE;
0000e8  485a              LDR      r0,|L2.596|
0000ea  3020              ADDS     r0,r0,#0x20
0000ec  6800              LDR      r0,[r0,#0]
0000ee  495d              LDR      r1,|L2.612|
0000f0  6008              STR      r0,[r1,#0]  ; temp_epn
;;;113                USB->rEP2_INT_STATE = temp_epn;
0000f2  4608              MOV      r0,r1
0000f4  6800              LDR      r0,[r0,#0]  ; temp_epn
0000f6  4957              LDR      r1,|L2.596|
0000f8  3120              ADDS     r1,r1,#0x20
0000fa  6008              STR      r0,[r1,#0]
;;;114                if(temp_epn&EPn_INT_STATE_OUTACK)							//端点输出应答中断
0000fc  4859              LDR      r0,|L2.612|
0000fe  7800              LDRB     r0,[r0,#0]  ; temp_epn
000100  f0000040          AND      r0,r0,#0x40
000104  b120              CBZ      r0,|L2.272|
;;;115                {
;;;116                    usb_out_flag = TRUE;	
000106  2001              MOVS     r0,#1
000108  495a              LDR      r1,|L2.628|
00010a  7008              STRB     r0,[r1,#0]
;;;117                    usb_out_handle();
00010c  f7fffffe          BL       usb_out_handle
                  |L2.272|
;;;118                }
;;;119                if(temp_epn&EPn_INT_STATE_END)								//传输完成中断
000110  4854              LDR      r0,|L2.612|
000112  7800              LDRB     r0,[r0,#0]  ; temp_epn
000114  f0000002          AND      r0,r0,#2
000118  b120              CBZ      r0,|L2.292|
;;;120                {
;;;121                    USB_FINISH_Flag[EPOUT] = TRUE;		
00011a  e000              B        |L2.286|
                  |L2.284|
00011c  e078              B        |L2.528|
                  |L2.286|
00011e  2001              MOVS     r0,#1
000120  4958              LDR      r1,|L2.644|
000122  7088              STRB     r0,[r1,#2]
                  |L2.292|
;;;122                }
;;;123                if(temp_epn&EPn_INT_STATE_INNACK)
000124  484f              LDR      r0,|L2.612|
000126  7800              LDRB     r0,[r0,#0]  ; temp_epn
000128  f0000004          AND      r0,r0,#4
00012c  b160              CBZ      r0,|L2.328|
;;;124                {
;;;125                    usb_in_flag = TRUE;
00012e  2001              MOVS     r0,#1
000130  494f              LDR      r1,|L2.624|
000132  7008              STRB     r0,[r1,#0]
;;;126                    usb_in_handle();
000134  f7fffffe          BL       usb_in_handle
;;;127                    USB->rEP1_INT_STATE=EPn_INT_STATE_INNACK;
000138  2004              MOVS     r0,#4
00013a  4946              LDR      r1,|L2.596|
00013c  311c              ADDS     r1,r1,#0x1c
00013e  6008              STR      r0,[r1,#0]
;;;128                    USB->rEP1_INT_EN = EPn_INT_STATE_END|EPn_INT_STATE_INNACK|EPn_INT_STATE_OUTACK|(EPn_INT_EN_OUTSTALLIE|EPn_INT_EN_INSTALLIE);
000140  20d6              MOVS     r0,#0xd6
000142  4944              LDR      r1,|L2.596|
000144  313c              ADDS     r1,r1,#0x3c
000146  6008              STR      r0,[r1,#0]
                  |L2.328|
;;;129                }
;;;130                if(temp_epn&(EPn_INT_EN_OUTSTALLIE|EPn_INT_EN_INSTALLIE))
000148  4846              LDR      r0,|L2.612|
00014a  7800              LDRB     r0,[r0,#0]  ; temp_epn
00014c  f0000090          AND      r0,r0,#0x90
000150  b110              CBZ      r0,|L2.344|
;;;131                {			
;;;132                    USB_EP_STALL[EPOUT] = TRUE;	
000152  2001              MOVS     r0,#1
000154  4948              LDR      r1,|L2.632|
000156  7088              STRB     r0,[r1,#2]
                  |L2.344|
;;;133                }
;;;134                if(temp_epn&EPn_INT_STATE_INSTALL)
000158  4842              LDR      r0,|L2.612|
00015a  7800              LDRB     r0,[r0,#0]  ; temp_epn
00015c  f0000010          AND      r0,r0,#0x10
000160  b110              CBZ      r0,|L2.360|
;;;135                {
;;;136                    USB_EP_IN_STALL[EPOUT] = TRUE;
000162  2001              MOVS     r0,#1
000164  4945              LDR      r1,|L2.636|
000166  7088              STRB     r0,[r1,#2]
                  |L2.360|
;;;137                }
;;;138                if(temp_epn&EPn_INT_STATE_OUTSTALL)
000168  483e              LDR      r0,|L2.612|
00016a  7800              LDRB     r0,[r0,#0]  ; temp_epn
00016c  f0000080          AND      r0,r0,#0x80
000170  b110              CBZ      r0,|L2.376|
;;;139                {
;;;140                    USB_EP_OUT_STALL[EPOUT] = TRUE;
000172  2001              MOVS     r0,#1
000174  4942              LDR      r1,|L2.640|
000176  7088              STRB     r0,[r1,#2]
                  |L2.376|
;;;141                }
;;;142            }
;;;143    #endif
;;;144            if(temp_ep&EPn_INT(EPIN))
000178  4838              LDR      r0,|L2.604|
00017a  7800              LDRB     r0,[r0,#0]  ; temp_ep
00017c  f0000002          AND      r0,r0,#2
000180  2800              CMP      r0,#0
000182  d065              BEQ      |L2.592|
;;;145            {
;;;146                usb_ep_flag=USB_EPn(EPIN);
000184  2001              MOVS     r0,#1
000186  4936              LDR      r1,|L2.608|
000188  7008              STRB     r0,[r1,#0]
;;;147                
;;;148                temp_epn = USB->rEP1_INT_STATE;
00018a  4832              LDR      r0,|L2.596|
00018c  301c              ADDS     r0,r0,#0x1c
00018e  6800              LDR      r0,[r0,#0]
000190  4934              LDR      r1,|L2.612|
000192  6008              STR      r0,[r1,#0]  ; temp_epn
;;;149                USB->rEP1_INT_STATE = temp_epn;
000194  4608              MOV      r0,r1
000196  6800              LDR      r0,[r0,#0]  ; temp_epn
000198  492e              LDR      r1,|L2.596|
00019a  311c              ADDS     r1,r1,#0x1c
00019c  6008              STR      r0,[r1,#0]
;;;150                if(temp_epn&EPn_INT_STATE_INNACK)
00019e  4831              LDR      r0,|L2.612|
0001a0  7800              LDRB     r0,[r0,#0]  ; temp_epn
0001a2  f0000004          AND      r0,r0,#4
0001a6  b140              CBZ      r0,|L2.442|
;;;151                {
;;;152                    usb_in_flag = TRUE;
0001a8  2001              MOVS     r0,#1
0001aa  4931              LDR      r1,|L2.624|
0001ac  7008              STRB     r0,[r1,#0]
;;;153                    usb_in_handle();		
0001ae  f7fffffe          BL       usb_in_handle
;;;154                    USB->rEP1_INT_EN = EPn_INT_STATE_END|EPn_INT_STATE_INNACK|EPn_INT_STATE_OUTACK|(EPn_INT_EN_OUTSTALLIE|EPn_INT_EN_INSTALLIE);
0001b2  20d6              MOVS     r0,#0xd6
0001b4  4927              LDR      r1,|L2.596|
0001b6  313c              ADDS     r1,r1,#0x3c
0001b8  6008              STR      r0,[r1,#0]
                  |L2.442|
;;;155                }
;;;156                if(temp_epn&EPn_INT_STATE_OUTACK)
0001ba  482a              LDR      r0,|L2.612|
0001bc  7800              LDRB     r0,[r0,#0]  ; temp_epn
0001be  f0000040          AND      r0,r0,#0x40
0001c2  b120              CBZ      r0,|L2.462|
;;;157                {
;;;158                    usb_out_flag = TRUE;	
0001c4  2001              MOVS     r0,#1
0001c6  492b              LDR      r1,|L2.628|
0001c8  7008              STRB     r0,[r1,#0]
;;;159                    usb_out_handle();		
0001ca  f7fffffe          BL       usb_out_handle
                  |L2.462|
;;;160                }				
;;;161                if(temp_epn&EPn_INT_STATE_END)
0001ce  4825              LDR      r0,|L2.612|
0001d0  7800              LDRB     r0,[r0,#0]  ; temp_epn
0001d2  f0000002          AND      r0,r0,#2
0001d6  b110              CBZ      r0,|L2.478|
;;;162                    USB_FINISH_Flag[EPIN] = TRUE;
0001d8  2001              MOVS     r0,#1
0001da  492a              LDR      r1,|L2.644|
0001dc  7048              STRB     r0,[r1,#1]
                  |L2.478|
;;;163                if(temp_epn&(EPn_INT_EN_OUTSTALLIE|EPn_INT_EN_INSTALLIE))
0001de  4821              LDR      r0,|L2.612|
0001e0  7800              LDRB     r0,[r0,#0]  ; temp_epn
0001e2  f0000090          AND      r0,r0,#0x90
0001e6  b110              CBZ      r0,|L2.494|
;;;164                {			
;;;165                    USB_EP_STALL[EPIN] = TRUE;	
0001e8  2001              MOVS     r0,#1
0001ea  4923              LDR      r1,|L2.632|
0001ec  7048              STRB     r0,[r1,#1]
                  |L2.494|
;;;166                }
;;;167                if(temp_epn&EPn_INT_STATE_INSTALL)
0001ee  481d              LDR      r0,|L2.612|
0001f0  7800              LDRB     r0,[r0,#0]  ; temp_epn
0001f2  f0000010          AND      r0,r0,#0x10
0001f6  b110              CBZ      r0,|L2.510|
;;;168                {
;;;169                    USB_EP_IN_STALL[EPIN] = TRUE;
0001f8  2001              MOVS     r0,#1
0001fa  4920              LDR      r1,|L2.636|
0001fc  7048              STRB     r0,[r1,#1]
                  |L2.510|
;;;170                }
;;;171                if(temp_epn&EPn_INT_STATE_OUTSTALL)
0001fe  4819              LDR      r0,|L2.612|
000200  7800              LDRB     r0,[r0,#0]  ; temp_epn
000202  f0000080          AND      r0,r0,#0x80
000206  b110              CBZ      r0,|L2.526|
;;;172                {
;;;173                    USB_EP_OUT_STALL[EPIN] = TRUE;
000208  2001              MOVS     r0,#1
00020a  491d              LDR      r1,|L2.640|
00020c  7048              STRB     r0,[r1,#1]
                  |L2.526|
00020e  e01f              B        |L2.592|
                  |L2.528|
;;;174                }
;;;175            }
;;;176        }
;;;177        else if(temp & USB_INT_STATE_RSTF)
000210  4811              LDR      r0,|L2.600|
000212  7800              LDRB     r0,[r0,#0]  ; temp
000214  f0000001          AND      r0,r0,#1
000218  b128              CBZ      r0,|L2.550|
;;;178        {															//got host reset interrupt
;;;179            usb_reset_flag = TRUE;
00021a  2001              MOVS     r0,#1
00021c  491a              LDR      r1,|L2.648|
00021e  7008              STRB     r0,[r1,#0]
;;;180            usb_reset_handle();
000220  f7fffffe          BL       usb_reset_handle
000224  e014              B        |L2.592|
                  |L2.550|
;;;181        }else if(temp & USB_INT_STATE_SUSPENDF )
000226  480c              LDR      r0,|L2.600|
000228  7800              LDRB     r0,[r0,#0]  ; temp
00022a  f0000002          AND      r0,r0,#2
00022e  b128              CBZ      r0,|L2.572|
;;;182        {
;;;183            usb_suspend_flag = TRUE;
000230  2001              MOVS     r0,#1
000232  4916              LDR      r1,|L2.652|
000234  7008              STRB     r0,[r1,#0]
;;;184            usb_suspend_handle();
000236  f7fffffe          BL       usb_suspend_handle
00023a  e009              B        |L2.592|
                  |L2.572|
;;;185        }else if(temp & USB_INT_STATE_RESUMF  )
00023c  4806              LDR      r0,|L2.600|
00023e  7800              LDRB     r0,[r0,#0]  ; temp
000240  f0000004          AND      r0,r0,#4
000244  b120              CBZ      r0,|L2.592|
;;;186        {
;;;187            usb_resume_flag = TRUE;
000246  2001              MOVS     r0,#1
000248  4911              LDR      r1,|L2.656|
00024a  7008              STRB     r0,[r1,#0]
;;;188            usb_resume_handle();
00024c  f7fffffe          BL       usb_resume_handle
                  |L2.592|
;;;189        }
;;;190    }
000250  bd10              POP      {r4,pc}
;;;191    
                          ENDP

000252  0000              DCW      0x0000
                  |L2.596|
                          DCD      0x40005c04
                  |L2.600|
                          DCD      temp
                  |L2.604|
                          DCD      temp_ep
                  |L2.608|
                          DCD      usb_ep_flag
                  |L2.612|
                          DCD      temp_epn
                  |L2.616|
                          DCD      usb_setup_flag
                  |L2.620|
                          DCD      USB_SEND_OPEN_STALL
                  |L2.624|
                          DCD      usb_in_flag
                  |L2.628|
                          DCD      usb_out_flag
                  |L2.632|
                          DCD      USB_EP_STALL
                  |L2.636|
                          DCD      USB_EP_IN_STALL
                  |L2.640|
                          DCD      USB_EP_OUT_STALL
                  |L2.644|
                          DCD      USB_FINISH_Flag
                  |L2.648|
                          DCD      usb_reset_flag
                  |L2.652|
                          DCD      usb_suspend_flag
                  |L2.656|
                          DCD      usb_resume_flag

                          AREA ||i.Write_Mreg32||, CODE, READONLY, ALIGN=1

                  Write_Mreg32 PROC
;;;196    
;;;197    void Write_Mreg32( uint32 mreg, uint32 val)
000000  6001              STR      r1,[r0,#0]
;;;198    {
;;;199        *(volatile uint32 *)mreg = (uint32)val;	
;;;200    }
000002  4770              BX       lr
;;;201    
                          ENDP


                          AREA ||i.read_mreg8||, CODE, READONLY, ALIGN=1

                  read_mreg8 PROC
;;;202    
;;;203    uint8 read_mreg8( uint32 mreg)
000000  4601              MOV      r1,r0
;;;204    {
;;;205        return(*(volatile uint8 *)mreg);		
000002  7808              LDRB     r0,[r1,#0]
;;;206    }
000004  4770              BX       lr
;;;207    
                          ENDP


                          AREA ||i.usb_delay1ms||, CODE, READONLY, ALIGN=1

                  usb_delay1ms PROC
;;;212    
;;;213    void usb_delay1ms(uint32 dly)
000000  b530              PUSH     {r4,r5,lr}
;;;214    {
;;;215        uint32 cnt,i,j,k;
;;;216        
;;;217        for(cnt=0;cnt<dly;cnt++)
000002  2100              MOVS     r1,#0
000004  e00f              B        |L5.38|
                  |L5.6|
;;;218        {
;;;219            for(i=0;i<24;i++)										//wait bus wakeup
000006  2200              MOVS     r2,#0
000008  e00a              B        |L5.32|
                  |L5.10|
;;;220            {
;;;221                for(j=0;j<2;j++)
00000a  2300              MOVS     r3,#0
00000c  e005              B        |L5.26|
                  |L5.14|
;;;222                {
;;;223                    for(k=0;k<100;k++);
00000e  2400              MOVS     r4,#0
000010  e000              B        |L5.20|
                  |L5.18|
000012  1c64              ADDS     r4,r4,#1
                  |L5.20|
000014  2c64              CMP      r4,#0x64
000016  d3fc              BCC      |L5.18|
000018  1c5b              ADDS     r3,r3,#1              ;221
                  |L5.26|
00001a  2b02              CMP      r3,#2                 ;221
00001c  d3f7              BCC      |L5.14|
00001e  1c52              ADDS     r2,r2,#1              ;219
                  |L5.32|
000020  2a18              CMP      r2,#0x18              ;219
000022  d3f2              BCC      |L5.10|
000024  1c49              ADDS     r1,r1,#1              ;217
                  |L5.38|
000026  4281              CMP      r1,r0                 ;217
000028  d3ed              BCC      |L5.6|
;;;224                }
;;;225            }
;;;226        }
;;;227        
;;;228    }
00002a  bd30              POP      {r4,r5,pc}
;;;229    
                          ENDP


                          AREA ||i.usb_reset||, CODE, READONLY, ALIGN=1

                  usb_reset PROC
;;;37     
;;;38     void usb_reset()
000000  4770              BX       lr
;;;39     {
;;;40         
;;;41     }
;;;42     
                          ENDP


                          AREA ||i.write_mreg8||, CODE, READONLY, ALIGN=1

                  write_mreg8 PROC
;;;207    
;;;208    void write_mreg8( uint32 mreg, uint8 val)
000000  7001              STRB     r1,[r0,#0]
;;;209    {
;;;210        *(volatile uint8 *)mreg = (uint8)val;
;;;211    }
000002  4770              BX       lr
;;;212    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  USB_EP_STALL
                          DCD      0x00000000
000004  00                DCB      0x00
                  USB_EP_IN_STALL
000005  000000            DCB      0x00,0x00,0x00
000008  0000              DCB      0x00,0x00
                  USB_EP_OUT_STALL
00000a  0000              DCB      0x00,0x00
00000c  000000            DCB      0x00,0x00,0x00
                  usb_setup_flag
00000f  00                DCB      0x00
                  usb_out_flag
000010  00                DCB      0x00
                  usb_in_flag
000011  00                DCB      0x00
                  USB_FINISH_Flag
000012  0000              DCB      0x00,0x00
000014  000000            DCB      0x00,0x00,0x00
                  usb_reset_flag
000017  00                DCB      0x00
                  usb_suspend_flag
000018  00                DCB      0x00
                  usb_resume_flag
000019  00                DCB      0x00
                  usb_state_suspend
00001a  00                DCB      0x00
                  usb_state_resume
00001b  00                DCB      0x00
                  usb_state
00001c  00                DCB      0x00
                  usb_ep_flag
00001d  00                DCB      0x00
                  USB_SEND_OPEN_STALL
00001e  0000              DCB      0x00,0x00
000020  00000000          DCB      0x00,0x00,0x00,0x00
                  temp
                          DCD      0x00000000
                  temp_ep
                          DCD      0x00000000
                  temp_epn
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\bsp\\usblib\\usbreg.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_usbreg_c_4c9b3a0e____REV16|
#line 129 "..\\..\\..\\..\\..\\Device\\CMSIS\\KEIL_CORE\\core_cmInstr.h"
|__asm___8_usbreg_c_4c9b3a0e____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_usbreg_c_4c9b3a0e____REVSH|
#line 144
|__asm___8_usbreg_c_4c9b3a0e____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___8_usbreg_c_4c9b3a0e____RRX|
#line 300
|__asm___8_usbreg_c_4c9b3a0e____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
