; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\main.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\bsp -I..\bsp\test -I..\bsp\usblib -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\uart -I..\..\..\..\..\Device\MM32F103\Include -I..\HARDWARE\KEY -I..\..\..\..\..\Device\CMSIS\KEIL_CORE -IF:\work\8月\F103n、F031n样例制作\MM32F103RegLib_MiniBoard_Ver1.0.0\MM32F103RegLib_MiniBoard_libReg\MBF103PF_reg\USB\USB_Keyboard\KEIL_PRJ\RTE\_projectgroup -IC:\Keil_v5\ARM\PACK\MindMotion\MM32F103_DFP\1.4.3\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\PACK\MindMotion\MM32L3xx_DFP\1.0.3\Device\MM32L3xx\Include -D__UVISION_VERSION=522 -DMM32F103CBT -DF103_N_VERSION --omf_browse=.\objects\main.crf ..\bsp\test\main.c]
                          THUMB

                          AREA ||i.DelayMs||, CODE, READONLY, ALIGN=1

                  DelayMs PROC
;;;54     ********************************************************************************************************/
;;;55     void DelayMs(u32 ulMs)
000000  4601              MOV      r1,r0
;;;56     {
;;;57         u32 i;
;;;58         u16 j;
;;;59         for(i = ulMs;i > 0;i--)
000002  e007              B        |L1.20|
                  |L1.4|
;;;60         {
;;;61             for(j = 4700;j > 0;j--);
000004  f241225c          MOV      r2,#0x125c
000008  e001              B        |L1.14|
                  |L1.10|
00000a  1e53              SUBS     r3,r2,#1
00000c  b29a              UXTH     r2,r3
                  |L1.14|
00000e  2a00              CMP      r2,#0
000010  dcfb              BGT      |L1.10|
000012  1e49              SUBS     r1,r1,#1              ;59
                  |L1.20|
000014  2900              CMP      r1,#0                 ;59
000016  d1f5              BNE      |L1.4|
;;;62         }
;;;63     }
000018  4770              BX       lr
;;;64     /**
                          ENDP


                          AREA ||i.GPIO_Configuration||, CODE, READONLY, ALIGN=2

                  GPIO_Configuration PROC
;;;68     */
;;;69     void GPIO_Configuration(void)
000000  480b              LDR      r0,|L2.48|
;;;70     {
;;;71         //	GPIO_InitTypeDef GPIO_InitStructure; 
;;;72         //	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);  
;;;73         RCC->APB2ENR|=RCC_APB2ENR_IOPCEN;
000002  6980              LDR      r0,[r0,#0x18]
000004  f0400010          ORR      r0,r0,#0x10
000008  4909              LDR      r1,|L2.48|
00000a  6188              STR      r0,[r1,#0x18]
;;;74         GPIOC->CRL&=0XFF0FFFFF;	//PC5设置成输入	  
00000c  4809              LDR      r0,|L2.52|
00000e  6800              LDR      r0,[r0,#0]
000010  f4200070          BIC      r0,r0,#0xf00000
000014  4907              LDR      r1,|L2.52|
000016  6008              STR      r0,[r1,#0]
;;;75         GPIOC->CRL|=GPIO_CRL_CNF5_1;   
000018  4608              MOV      r0,r1
00001a  6800              LDR      r0,[r0,#0]
00001c  f4400000          ORR      r0,r0,#0x800000
000020  6008              STR      r0,[r1,#0]
;;;76         GPIOC->ODR|=GPIO_ODR_ODR5;	   	//PC5上拉 
000022  4608              MOV      r0,r1
000024  68c0              LDR      r0,[r0,#0xc]
000026  f0400020          ORR      r0,r0,#0x20
00002a  60c8              STR      r0,[r1,#0xc]
;;;77     }
00002c  4770              BX       lr
;;;78     /**
                          ENDP

00002e  0000              DCW      0x0000
                  |L2.48|
                          DCD      0x40021000
                  |L2.52|
                          DCD      0x40011000

                          AREA ||i.NVIC_Configuration||, CODE, READONLY, ALIGN=1

                  NVIC_Configuration PROC
;;;82     */
;;;83     void NVIC_Configuration(void)
000000  4770              BX       lr
;;;84     {
;;;85         /*配置中断优先级模式,0位抢占优先级,4位子优先级*/
;;;86         //NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
;;;87     }
;;;88     /********************************************************************************************************
                          ENDP


                          AREA ||i.RCC_DeInit||, CODE, READONLY, ALIGN=2

                  RCC_DeInit PROC
;;;105    
;;;106    void RCC_DeInit(void)
000000  480f              LDR      r0,|L4.64|
;;;107    {
;;;108        /* Set HSION bit */
;;;109        RCC->CR |= (uint32_t)0x00000001;
000002  6800              LDR      r0,[r0,#0]
000004  f0400001          ORR      r0,r0,#1
000008  490d              LDR      r1,|L4.64|
00000a  6008              STR      r0,[r1,#0]
;;;110        /* Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], ADCPRE[1:0] and MCO[2:0] bits */
;;;111        RCC->CFGR &= (uint32_t)0xF8FF0000;
00000c  4608              MOV      r0,r1
00000e  6840              LDR      r0,[r0,#4]
000010  490c              LDR      r1,|L4.68|
000012  4008              ANDS     r0,r0,r1
000014  490a              LDR      r1,|L4.64|
000016  6048              STR      r0,[r1,#4]
;;;112        
;;;113        /* Reset HSEON, CSSON and PLLON bits */
;;;114        RCC->CR &= (uint32_t)0xFEF6FFFF;
000018  4608              MOV      r0,r1
00001a  6800              LDR      r0,[r0,#0]
00001c  490a              LDR      r1,|L4.72|
00001e  4008              ANDS     r0,r0,r1
000020  4907              LDR      r1,|L4.64|
000022  6008              STR      r0,[r1,#0]
;;;115        /* Reset HSEBYP bit */
;;;116        RCC->CR &= (uint32_t)0xFFFBFFFF;
000024  4608              MOV      r0,r1
000026  6800              LDR      r0,[r0,#0]
000028  f4202080          BIC      r0,r0,#0x40000
00002c  6008              STR      r0,[r1,#0]
;;;117        /* Reset PLLSRC, PLLXTPRE, PLLMUL[3:0] and USBPRE bits */
;;;118        RCC->CFGR &= (uint32_t)0xFF80FFFF;
00002e  4608              MOV      r0,r1
000030  6840              LDR      r0,[r0,#4]
000032  f42000fe          BIC      r0,r0,#0x7f0000
000036  6048              STR      r0,[r1,#4]
;;;119        /* Disable all interrupts */
;;;120        RCC->CIR = 0x00000000;
000038  2000              MOVS     r0,#0
00003a  6088              STR      r0,[r1,#8]
;;;121    }
00003c  4770              BX       lr
;;;122    void SetUSBSysClockTo48M(void)
                          ENDP

00003e  0000              DCW      0x0000
                  |L4.64|
                          DCD      0x40021000
                  |L4.68|
                          DCD      0xf8ff0000
                  |L4.72|
                          DCD      0xfef6ffff

                          AREA ||i.SetUSBSysClockTo48M||, CODE, READONLY, ALIGN=2

                  SetUSBSysClockTo48M PROC
;;;121    }
;;;122    void SetUSBSysClockTo48M(void)
000000  b50c              PUSH     {r2,r3,lr}
;;;123    {
;;;124        __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
000002  2000              MOVS     r0,#0
000004  9001              STR      r0,[sp,#4]
000006  9000              STR      r0,[sp,#0]
;;;125        RCC_DeInit();
000008  f7fffffe          BL       RCC_DeInit
;;;126        /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
;;;127        /* Enable HSE */    
;;;128        RCC->CR |= ((uint32_t)RCC_CR_HSEON);
00000c  4838              LDR      r0,|L5.240|
00000e  6800              LDR      r0,[r0,#0]
000010  f4403080          ORR      r0,r0,#0x10000
000014  4936              LDR      r1,|L5.240|
000016  6008              STR      r0,[r1,#0]
;;;129        
;;;130        /* Wait till HSE is ready and if Time out is reached exit */
;;;131        do
000018  bf00              NOP      
                  |L5.26|
;;;132        {
;;;133            HSEStatus = RCC->CR & RCC_CR_HSERDY;
00001a  4835              LDR      r0,|L5.240|
00001c  6800              LDR      r0,[r0,#0]
00001e  f4003000          AND      r0,r0,#0x20000
000022  9000              STR      r0,[sp,#0]
;;;134            StartUpCounter++;  
000024  9801              LDR      r0,[sp,#4]
000026  1c40              ADDS     r0,r0,#1
000028  9001              STR      r0,[sp,#4]
;;;135        } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
00002a  9800              LDR      r0,[sp,#0]
00002c  b918              CBNZ     r0,|L5.54|
00002e  9801              LDR      r0,[sp,#4]
000030  f5b06fa0          CMP      r0,#0x500
000034  d1f1              BNE      |L5.26|
                  |L5.54|
;;;136        
;;;137        if ((RCC->CR & RCC_CR_HSERDY) != RESET)
000036  482e              LDR      r0,|L5.240|
000038  6800              LDR      r0,[r0,#0]
00003a  f4003000          AND      r0,r0,#0x20000
00003e  b110              CBZ      r0,|L5.70|
;;;138        {
;;;139            HSEStatus = (uint32_t)0x01;
000040  2001              MOVS     r0,#1
000042  9000              STR      r0,[sp,#0]
000044  e001              B        |L5.74|
                  |L5.70|
;;;140        }
;;;141        else
;;;142        {
;;;143            HSEStatus = (uint32_t)0x00;
000046  2000              MOVS     r0,#0
000048  9000              STR      r0,[sp,#0]
                  |L5.74|
;;;144        }  
;;;145        
;;;146        if (HSEStatus == (uint32_t)0x01)
00004a  9800              LDR      r0,[sp,#0]
00004c  2801              CMP      r0,#1
00004e  d14d              BNE      |L5.236|
;;;147        {
;;;148            /* Enable Prefetch Buffer */
;;;149            FLASH->ACR |= FLASH_ACR_PRFTBE;
000050  4828              LDR      r0,|L5.244|
000052  6800              LDR      r0,[r0,#0]
000054  f0400010          ORR      r0,r0,#0x10
000058  4926              LDR      r1,|L5.244|
00005a  6008              STR      r0,[r1,#0]
;;;150            /* Flash 0 wait state ,bit0~2*/
;;;151            FLASH->ACR &= ~0x07;
00005c  4608              MOV      r0,r1
00005e  6800              LDR      r0,[r0,#0]
000060  f0200007          BIC      r0,r0,#7
000064  6008              STR      r0,[r1,#0]
;;;152            FLASH->ACR |=0x02;
000066  4608              MOV      r0,r1
000068  6800              LDR      r0,[r0,#0]
00006a  f0400002          ORR      r0,r0,#2
00006e  6008              STR      r0,[r1,#0]
;;;153            /* HCLK = SYSCLK */
;;;154            RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
000070  481f              LDR      r0,|L5.240|
000072  6840              LDR      r0,[r0,#4]
000074  491e              LDR      r1,|L5.240|
000076  6048              STR      r0,[r1,#4]
;;;155            
;;;156            /* PCLK2 = HCLK */
;;;157            RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
000078  4608              MOV      r0,r1
00007a  6840              LDR      r0,[r0,#4]
00007c  6048              STR      r0,[r1,#4]
;;;158            
;;;159            /* PCLK1 = HCLK */
;;;160            RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
00007e  4608              MOV      r0,r1
000080  6840              LDR      r0,[r0,#4]
000082  f4406080          ORR      r0,r0,#0x400
000086  6048              STR      r0,[r1,#4]
;;;161            
;;;162            /*  PLL configuration:  = (HSE ) * (5+1) = 48MHz */
;;;163            RCC->CFGR &= (uint32_t)0xFFFCFFFF;
000088  4608              MOV      r0,r1
00008a  6840              LDR      r0,[r0,#4]
00008c  f4203040          BIC      r0,r0,#0x30000
000090  6048              STR      r0,[r1,#4]
;;;164            RCC->CR &= (uint32_t)0x000FFFFF;  
000092  4608              MOV      r0,r1
000094  6800              LDR      r0,[r0,#0]
000096  f3c00013          UBFX     r0,r0,#0,#20
00009a  6008              STR      r0,[r1,#0]
;;;165            
;;;166            RCC->CFGR |= (uint32_t ) RCC_CFGR_PLLSRC ;
00009c  4608              MOV      r0,r1
00009e  6840              LDR      r0,[r0,#4]
0000a0  f4403080          ORR      r0,r0,#0x10000
0000a4  6048              STR      r0,[r1,#4]
;;;167            RCC->CR |= 0x14000000;//pll = 6/1
0000a6  4608              MOV      r0,r1
0000a8  6800              LDR      r0,[r0,#0]
0000aa  f04050a0          ORR      r0,r0,#0x14000000
0000ae  6008              STR      r0,[r1,#0]
;;;168            //RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
;;;169            //RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL6);
;;;170            
;;;171            /* Enable PLL */
;;;172            RCC->CR |= RCC_CR_PLLON;
0000b0  4608              MOV      r0,r1
0000b2  6800              LDR      r0,[r0,#0]
0000b4  f0407080          ORR      r0,r0,#0x1000000
0000b8  6008              STR      r0,[r1,#0]
;;;173            
;;;174            /* Wait till PLL is ready */
;;;175            while((RCC->CR & RCC_CR_PLLRDY) == 0)
0000ba  bf00              NOP      
                  |L5.188|
0000bc  480c              LDR      r0,|L5.240|
0000be  6800              LDR      r0,[r0,#0]
0000c0  f0007000          AND      r0,r0,#0x2000000
0000c4  2800              CMP      r0,#0
0000c6  d0f9              BEQ      |L5.188|
;;;176            {
;;;177            }
;;;178            
;;;179            /* Select PLL as system clock source */
;;;180            RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
0000c8  4809              LDR      r0,|L5.240|
0000ca  6840              LDR      r0,[r0,#4]
0000cc  f0200003          BIC      r0,r0,#3
0000d0  4907              LDR      r1,|L5.240|
0000d2  6048              STR      r0,[r1,#4]
;;;181            RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
0000d4  4608              MOV      r0,r1
0000d6  6840              LDR      r0,[r0,#4]
0000d8  f0400002          ORR      r0,r0,#2
0000dc  6048              STR      r0,[r1,#4]
;;;182            
;;;183            /* Wait till PLL is used as system clock source */
;;;184            while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
0000de  bf00              NOP      
                  |L5.224|
0000e0  4803              LDR      r0,|L5.240|
0000e2  6840              LDR      r0,[r0,#4]
0000e4  f000000c          AND      r0,r0,#0xc
0000e8  2808              CMP      r0,#8
0000ea  d1f9              BNE      |L5.224|
                  |L5.236|
;;;185            {
;;;186            }
;;;187        }
;;;188        else
;;;189        { /* If HSE fails to start-up, the application will have wrong clock 
;;;190            configuration. User can add here some code to deal with this error */
;;;191        }
;;;192    }
0000ec  bd0c              POP      {r2,r3,pc}
;;;193    
                          ENDP

0000ee  0000              DCW      0x0000
                  |L5.240|
                          DCD      0x40021000
                  |L5.244|
                          DCD      0x40022000

                          AREA ||i.SysInit||, CODE, READONLY, ALIGN=2

                  SysInit PROC
;;;95     ********************************************************************************************************/
;;;96     void SysInit(void)
000000  b510              PUSH     {r4,lr}
;;;97     {
;;;98         SetUSBSysClockTo48M();
000002  f7fffffe          BL       SetUSBSysClockTo48M
;;;99         NVIC_Configuration();
000006  f7fffffe          BL       NVIC_Configuration
;;;100        
;;;101        /*初始化串口1,波特率为115200,无奇偶校验,无硬件流控制,1位停止位*/
;;;102        uart_init(48,115200);	 //串口初始化为115200
00000a  f44f31e1          MOV      r1,#0x1c200
00000e  2030              MOVS     r0,#0x30
000010  f7fffffe          BL       uart_init
;;;103        printf("UART OK!\r\n");
000014  a001              ADR      r0,|L6.28|
000016  f7fffffe          BL       __2printf
;;;104    }
00001a  bd10              POP      {r4,pc}
;;;105    
                          ENDP

                  |L6.28|
00001c  55415254          DCB      "UART OK!\r\n",0
000020  204f4b21
000024  0d0a00  
000027  00                DCB      0

                          AREA ||i.main||, CODE, READONLY, ALIGN=1

                  main PROC
;;;18     ********************************************************************************************************/
;;;19     int main(void)
000000  b50e              PUSH     {r1-r3,lr}
;;;20     {
;;;21         u8 t=0;
000002  2400              MOVS     r4,#0
;;;22         SysInit();
000004  f7fffffe          BL       SysInit
;;;23         GPIO_Configuration();
000008  f7fffffe          BL       GPIO_Configuration
;;;24         KEY_Init();
00000c  f7fffffe          BL       KEY_Init
;;;25         usb_test();
000010  f7fffffe          BL       usb_test
;;;26         
;;;27         while(1)
000014  e029              B        |L7.106|
                  |L7.22|
;;;28         {
;;;29             t=KEY_Scan(0);		//得到键值
000016  2000              MOVS     r0,#0
000018  f7fffffe          BL       KEY_Scan
00001c  4604              MOV      r4,r0
;;;30             switch(t)
00001e  2c02              CMP      r4,#2
000020  d004              BEQ      |L7.44|
000022  2c03              CMP      r4,#3
000024  d00c              BEQ      |L7.64|
000026  2c04              CMP      r4,#4
000028  d11e              BNE      |L7.104|
00002a  e013              B        |L7.84|
                  |L7.44|
;;;31             {				 
;;;32             case WKUP_PRES:
;;;33                 keyBoard_ctrl(0x00,0x00,4,0x00,0x00,0x00,0x00);
00002c  2000              MOVS     r0,#0
00002e  9000              STR      r0,[sp,#0]
000030  9001              STR      r0,[sp,#4]
000032  4603              MOV      r3,r0
000034  2204              MOVS     r2,#4
000036  4601              MOV      r1,r0
000038  9002              STR      r0,[sp,#8]
00003a  f7fffffe          BL       keyBoard_ctrl
;;;34                 break;
00003e  e013              B        |L7.104|
                  |L7.64|
;;;35             case KEY3_PRES:				
;;;36                 keyBoard_ctrl(0x00,0x00,5,0x00,0x00,0x00,0x00);
000040  2000              MOVS     r0,#0
000042  9000              STR      r0,[sp,#0]
000044  9001              STR      r0,[sp,#4]
000046  4603              MOV      r3,r0
000048  2205              MOVS     r2,#5
00004a  4601              MOV      r1,r0
00004c  9002              STR      r0,[sp,#8]
00004e  f7fffffe          BL       keyBoard_ctrl
;;;37                 break;
000052  e009              B        |L7.104|
                  |L7.84|
;;;38             case KEY4_PRES:				
;;;39                 keyBoard_ctrl(0x00,0x00,6,0x00,0x00,0x00,0x00);
000054  2000              MOVS     r0,#0
000056  9000              STR      r0,[sp,#0]
000058  9001              STR      r0,[sp,#4]
00005a  4603              MOV      r3,r0
00005c  2206              MOVS     r2,#6
00005e  4601              MOV      r1,r0
000060  9002              STR      r0,[sp,#8]
000062  f7fffffe          BL       keyBoard_ctrl
;;;40                 break;
000066  bf00              NOP      
                  |L7.104|
000068  bf00              NOP                            ;34
                  |L7.106|
00006a  e7d4              B        |L7.22|
;;;41             } 
;;;42         }
;;;43         
;;;44     }
;;;45     
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\bsp\\test\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REV16|
#line 129 "..\\..\\..\\..\\..\\Device\\CMSIS\\KEIL_CORE\\core_cmInstr.h"
|__asm___6_main_c_main____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REVSH|
#line 144
|__asm___6_main_c_main____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____RRX|
#line 300
|__asm___6_main_c_main____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
