; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\ctrlusb.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\ctrlusb.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\bsp -I..\bsp\test -I..\bsp\usblib -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\uart -I..\..\..\..\..\Device\MM32F103\Include -I..\HARDWARE\KEY -I..\..\..\..\..\Device\CMSIS\KEIL_CORE -IF:\work\8月\F103n、F031n样例制作\MM32F103RegLib_MiniBoard_Ver1.0.0\MM32F103RegLib_MiniBoard_libReg\MBF103PF_reg\USB\USB_Keyboard\KEIL_PRJ\RTE\_projectgroup -IC:\Keil_v5\ARM\PACK\MindMotion\MM32F103_DFP\1.4.3\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\PACK\MindMotion\MM32L3xx_DFP\1.0.3\Device\MM32L3xx\Include -D__UVISION_VERSION=522 -DMM32F103CBT -DF103_N_VERSION --omf_browse=.\objects\ctrlusb.crf ..\bsp\usblib\ctrlusb.c]
                          THUMB

                          AREA ||i.USB_Init||, CODE, READONLY, ALIGN=2

                  USB_Init PROC
;;;179    
;;;180    void USB_Init( void)
000000  2100              MOVS     r1,#0
;;;181    {
;;;182        uint8 ix;
;;;183        uint32 tmpdata = 0x0;
;;;184        tmpdata = tmpdata;
000002  bf00              NOP      
;;;185        usb_setup_flag = 0;
000004  2200              MOVS     r2,#0
000006  4b46              LDR      r3,|L1.288|
000008  701a              STRB     r2,[r3,#0]
;;;186        usb_out_flag = 0;
00000a  4b46              LDR      r3,|L1.292|
00000c  701a              STRB     r2,[r3,#0]
;;;187        usb_in_flag = 0;
00000e  4b46              LDR      r3,|L1.296|
000010  701a              STRB     r2,[r3,#0]
;;;188        usb_reset_flag = 0;
000012  4b46              LDR      r3,|L1.300|
000014  701a              STRB     r2,[r3,#0]
;;;189        usb_suspend_flag = 0;
000016  4b46              LDR      r3,|L1.304|
000018  701a              STRB     r2,[r3,#0]
;;;190        usb_resume_flag = 0;
00001a  4b46              LDR      r3,|L1.308|
00001c  701a              STRB     r2,[r3,#0]
;;;191        
;;;192        usb_ep_flag=USB_EP0;
00001e  4b46              LDR      r3,|L1.312|
000020  701a              STRB     r2,[r3,#0]
;;;193        write_finish = 1;
000022  2201              MOVS     r2,#1
000024  4b45              LDR      r3,|L1.316|
000026  701a              STRB     r2,[r3,#0]
;;;194        dma_finished_flag[0] = 0;
000028  2200              MOVS     r2,#0
00002a  4b45              LDR      r3,|L1.320|
00002c  701a              STRB     r2,[r3,#0]
;;;195        dma_finished_flag[1] = 0;
00002e  705a              STRB     r2,[r3,#1]
;;;196        usb_state = USB_STATE_POWERED;
000030  2201              MOVS     r2,#1
000032  4b44              LDR      r3,|L1.324|
000034  701a              STRB     r2,[r3,#0]
;;;197        usb_running_state = USB_IDLE;
000036  22ff              MOVS     r2,#0xff
000038  4b43              LDR      r3,|L1.328|
00003a  701a              STRB     r2,[r3,#0]
;;;198        usb_running_ctrl_state = USB_IDLE;
00003c  4b43              LDR      r3,|L1.332|
00003e  701a              STRB     r2,[r3,#0]
;;;199        for(ix = 0; ix < 5; ix++)
000040  2000              MOVS     r0,#0
000042  e00c              B        |L1.94|
                  |L1.68|
;;;200        {
;;;201            USB_EP_STALL[ix] = FALSE;
000044  2200              MOVS     r2,#0
000046  4b42              LDR      r3,|L1.336|
000048  541a              STRB     r2,[r3,r0]
;;;202            USB_EP_IN_STALL[ix] = FALSE;
00004a  4b42              LDR      r3,|L1.340|
00004c  541a              STRB     r2,[r3,r0]
;;;203            USB_EP_OUT_STALL[ix] = FALSE;		
00004e  4b42              LDR      r3,|L1.344|
000050  541a              STRB     r2,[r3,r0]
;;;204            USB_FINISH_Flag[ix] = FALSE;
000052  4b42              LDR      r3,|L1.348|
000054  541a              STRB     r2,[r3,r0]
;;;205            USB_SEND_OPEN_STALL[ix] = FALSE;
000056  4b42              LDR      r3,|L1.352|
000058  541a              STRB     r2,[r3,r0]
00005a  1c42              ADDS     r2,r0,#1              ;199
00005c  b2d0              UXTB     r0,r2                 ;199
                  |L1.94|
00005e  2805              CMP      r0,#5                 ;199
000060  dbf0              BLT      |L1.68|
;;;206        }
;;;207        
;;;208        USB->rTOP  = USB_TOP_RESET;//reset usb
000062  2208              MOVS     r2,#8
000064  4b3f              LDR      r3,|L1.356|
000066  601a              STR      r2,[r3,#0]
;;;209        USB->rTOP  &= ~USB_TOP_RESET;
000068  461a              MOV      r2,r3
00006a  6812              LDR      r2,[r2,#0]
00006c  f0220208          BIC      r2,r2,#8
000070  601a              STR      r2,[r3,#0]
;;;210        USB->rTOP  &= ~USB_TOP_CONNECT ;//usb disconnect
000072  461a              MOV      r2,r3
000074  6812              LDR      r2,[r2,#0]
000076  f0220202          BIC      r2,r2,#2
00007a  601a              STR      r2,[r3,#0]
;;;211        
;;;212        USB->rINT_STATE |= 0;//清USB状态
00007c  1d1a              ADDS     r2,r3,#4
00007e  6812              LDR      r2,[r2,#0]
000080  1d1b              ADDS     r3,r3,#4
000082  601a              STR      r2,[r3,#0]
;;;213        USB->rEP_INT_STATE |= 0;
000084  1d1a              ADDS     r2,r3,#4
000086  6812              LDR      r2,[r2,#0]
000088  1d1b              ADDS     r3,r3,#4
00008a  601a              STR      r2,[r3,#0]
;;;214        USB->rEP0_INT_STATE |= 0;
00008c  1d1a              ADDS     r2,r3,#4
00008e  6812              LDR      r2,[r2,#0]
000090  1d1b              ADDS     r3,r3,#4
000092  601a              STR      r2,[r3,#0]
;;;215        USB->rEP1_INT_STATE |= 0;
000094  4a33              LDR      r2,|L1.356|
000096  3220              ADDS     r2,r2,#0x20
000098  6812              LDR      r2,[r2,#0]
00009a  4b32              LDR      r3,|L1.356|
00009c  3320              ADDS     r3,r3,#0x20
00009e  601a              STR      r2,[r3,#0]
;;;216        USB->rEP2_INT_STATE |= 0;
0000a0  1d1a              ADDS     r2,r3,#4
0000a2  6812              LDR      r2,[r2,#0]
0000a4  1d1b              ADDS     r3,r3,#4
0000a6  601a              STR      r2,[r3,#0]
;;;217        USB->rEP3_INT_STATE |= 0;
0000a8  1d1a              ADDS     r2,r3,#4
0000aa  6812              LDR      r2,[r2,#0]
0000ac  1d1b              ADDS     r3,r3,#4
0000ae  601a              STR      r2,[r3,#0]
;;;218        USB->rEP4_INT_STATE |= 0;
0000b0  1d1a              ADDS     r2,r3,#4
0000b2  6812              LDR      r2,[r2,#0]
0000b4  1d1b              ADDS     r3,r3,#4
0000b6  601a              STR      r2,[r3,#0]
;;;219        
;;;220        USB->rEP0_CTRL |= 0;//清数据
0000b8  4a2b              LDR      r2,|L1.360|
0000ba  6812              LDR      r2,[r2,#0]
0000bc  4b2a              LDR      r3,|L1.360|
0000be  601a              STR      r2,[r3,#0]
;;;221        USB->rEP1_CTRL |= 0;
0000c0  1d1a              ADDS     r2,r3,#4
0000c2  6812              LDR      r2,[r2,#0]
0000c4  1d1b              ADDS     r3,r3,#4
0000c6  601a              STR      r2,[r3,#0]
;;;222        USB->rEP2_CTRL |= 0;
0000c8  1d1a              ADDS     r2,r3,#4
0000ca  6812              LDR      r2,[r2,#0]
0000cc  1d1b              ADDS     r3,r3,#4
0000ce  601a              STR      r2,[r3,#0]
;;;223        USB->rEP3_CTRL |= 0;
0000d0  1d1a              ADDS     r2,r3,#4
0000d2  6812              LDR      r2,[r2,#0]
0000d4  1d1b              ADDS     r3,r3,#4
0000d6  601a              STR      r2,[r3,#0]
;;;224        USB->rEP4_CTRL |= 0;
0000d8  1d1a              ADDS     r2,r3,#4
0000da  6812              LDR      r2,[r2,#0]
0000dc  1d1b              ADDS     r3,r3,#4
0000de  601a              STR      r2,[r3,#0]
;;;225        
;;;226        USB->rINT_EN = USB_INT_EN_RSTIE|USB_INT_EN_SUSPENDIE|USB_INT_EN_RESUMIE|USB_INT_EN_EPINTIE ;//使能USB相关中断
0000e0  2217              MOVS     r2,#0x17
0000e2  4b20              LDR      r3,|L1.356|
0000e4  3310              ADDS     r3,r3,#0x10
0000e6  601a              STR      r2,[r3,#0]
;;;227        USB->rEP_INT_EN = EP_INT_EN_EP0IE|EP_INT_EN_EP1IE|EP_INT_EN_EP2IE|EP_INT_EN_EP3IE|EP_INT_EN_EP4IE;//使能USB端点中断
0000e8  221f              MOVS     r2,#0x1f
0000ea  1d1b              ADDS     r3,r3,#4
0000ec  601a              STR      r2,[r3,#0]
;;;228        USB->rEP0_INT_EN = EPn_INT_EN_SETUPIE|EPn_INT_EN_ENDIE|EPn_INT_EN_INNACKIE|EPn_INT_EN_OUTACKIE|EPn_INT_EN_OUTSTALLIE|EPn_INT_EN_INSTALLIE;//使能USB端点0中断
0000ee  22d7              MOVS     r2,#0xd7
0000f0  1d1b              ADDS     r3,r3,#4
0000f2  601a              STR      r2,[r3,#0]
;;;229        
;;;230        USB->rEP1_INT_EN = EPn_INT_EN_ENDIE |EPn_INT_EN_INNACKIE|EPn_INT_EN_INSTALLIE |EPn_INT_EN_OUTSTALLIE; //EPIN = EP_1，使能输入端点中断;
0000f4  2296              MOVS     r2,#0x96
0000f6  4b1b              LDR      r3,|L1.356|
0000f8  3340              ADDS     r3,r3,#0x40
0000fa  601a              STR      r2,[r3,#0]
;;;231        USB->rEP2_INT_EN = EPn_INT_EN_ENDIE |EPn_INT_EN_OUTACKIE|EPn_INT_EN_INSTALLIE |EPn_INT_EN_OUTSTALLIE; //EPOUT = 2，使能输出端点中断;	
0000fc  22d2              MOVS     r2,#0xd2
0000fe  1d1b              ADDS     r3,r3,#4
000100  601a              STR      r2,[r3,#0]
;;;232        
;;;233        USB->rEP_EN = EP_EN_EP0EN|EP_EN_EP1EN|EP_EN_EP2EN|EP_EN_EP3EN|EP_EN_EP4EN;
000102  221f              MOVS     r2,#0x1f
000104  4b17              LDR      r3,|L1.356|
000106  3364              ADDS     r3,r3,#0x64
000108  601a              STR      r2,[r3,#0]
;;;234        USB->rADDR = 0;		
00010a  2200              MOVS     r2,#0
00010c  1f1b              SUBS     r3,r3,#4
00010e  601a              STR      r2,[r3,#0]
;;;235        
;;;236        USB->rTOP = USB_TOP_CONNECT|((~USB_TOP_SPEED)&0x01);//enter work
000110  2202              MOVS     r2,#2
000112  4b14              LDR      r3,|L1.356|
000114  601a              STR      r2,[r3,#0]
;;;237        USB->rPOWER = USB_POWER_SUSPEN|USB_POWER_SUSP;
000116  2203              MOVS     r2,#3
000118  4b13              LDR      r3,|L1.360|
00011a  3380              ADDS     r3,r3,#0x80
00011c  601a              STR      r2,[r3,#0]
;;;238    }
00011e  4770              BX       lr
;;;239    void usb_reset_handle(void)
                          ENDP

                  |L1.288|
                          DCD      usb_setup_flag
                  |L1.292|
                          DCD      usb_out_flag
                  |L1.296|
                          DCD      usb_in_flag
                  |L1.300|
                          DCD      usb_reset_flag
                  |L1.304|
                          DCD      usb_suspend_flag
                  |L1.308|
                          DCD      usb_resume_flag
                  |L1.312|
                          DCD      usb_ep_flag
                  |L1.316|
                          DCD      write_finish
                  |L1.320|
                          DCD      dma_finished_flag
                  |L1.324|
                          DCD      usb_state
                  |L1.328|
                          DCD      usb_running_state
                  |L1.332|
                          DCD      usb_running_ctrl_state
                  |L1.336|
                          DCD      USB_EP_STALL
                  |L1.340|
                          DCD      USB_EP_IN_STALL
                  |L1.344|
                          DCD      USB_EP_OUT_STALL
                  |L1.348|
                          DCD      USB_FINISH_Flag
                  |L1.352|
                          DCD      USB_SEND_OPEN_STALL
                  |L1.356|
                          DCD      0x40005c00
                  |L1.360|
                          DCD      0x40005d40

                          AREA ||i.ctrl_deal_handle||, CODE, READONLY, ALIGN=2

                  ctrl_deal_handle PROC
;;;112    
;;;113    void ctrl_deal_handle(void)
000000  b510              PUSH     {r4,lr}
;;;114    {
;;;115        if( req_type == USB_REQ_TYPE_STANDARD )     				// standard request type
000002  4814              LDR      r0,|L2.84|
000004  7800              LDRB     r0,[r0,#0]  ; req_type
000006  b950              CBNZ     r0,|L2.30|
;;;116        {
;;;117    #ifdef printf
;;;118            printf("USB标准请求");
;;;119    #endif
;;;120            if( bRequest < MAX_STD_REQUEST )    					// handle 0--12
000008  4813              LDR      r0,|L2.88|
00000a  7800              LDRB     r0,[r0,#0]  ; bRequest
00000c  280d              CMP      r0,#0xd
00000e  da1f              BGE      |L2.80|
;;;121            {
;;;122                (*StandardDeviceRequest[bRequest])( ) ;
000010  4912              LDR      r1,|L2.92|
000012  4a11              LDR      r2,|L2.88|
000014  7812              LDRB     r2,[r2,#0]  ; bRequest
000016  f8510022          LDR      r0,[r1,r2,LSL #2]
00001a  4780              BLX      r0
00001c  e018              B        |L2.80|
                  |L2.30|
;;;123            }
;;;124        }
;;;125        else if( req_type == USB_REQ_TYPE_CLASS )  					// class request type
00001e  480d              LDR      r0,|L2.84|
000020  7800              LDRB     r0,[r0,#0]  ; req_type
000022  2820              CMP      r0,#0x20
000024  d10e              BNE      |L2.68|
;;;126        {
;;;127            switch(bRequest)
000026  480c              LDR      r0,|L2.88|
000028  7800              LDRB     r0,[r0,#0]  ; bRequest
00002a  28fe              CMP      r0,#0xfe
00002c  d102              BNE      |L2.52|
;;;128            {
;;;129            case GET_MAX_LUN:
;;;130                {
;;;131                    Class_Send_Max_Lun( ) ;
00002e  f7fffffe          BL       Class_Send_Max_Lun
;;;132                    break;
000032  e006              B        |L2.66|
                  |L2.52|
;;;133                }
;;;134            default:
;;;135                {
;;;136                    if(req_dir==USB_REQ_DIR_IN)
000034  480a              LDR      r0,|L2.96|
000036  7800              LDRB     r0,[r0,#0]  ; req_dir
000038  2880              CMP      r0,#0x80
00003a  d101              BNE      |L2.64|
;;;137                    {
;;;138                        EP0_Send_Empty_Packet();
00003c  f7fffffe          BL       EP0_Send_Empty_Packet
                  |L2.64|
;;;139                    }
;;;140                    break;
000040  bf00              NOP      
                  |L2.66|
000042  e005              B        |L2.80|
                  |L2.68|
;;;141                }
;;;142            }		
;;;143        }
;;;144        else 
;;;145        {
;;;146            if(req_dir==USB_REQ_DIR_IN)
000044  4806              LDR      r0,|L2.96|
000046  7800              LDRB     r0,[r0,#0]  ; req_dir
000048  2880              CMP      r0,#0x80
00004a  d101              BNE      |L2.80|
;;;147            {
;;;148                EP0_Send_Empty_Packet();
00004c  f7fffffe          BL       EP0_Send_Empty_Packet
                  |L2.80|
;;;149            }
;;;150        }
;;;151    }
000050  bd10              POP      {r4,pc}
;;;152    
                          ENDP

000052  0000              DCW      0x0000
                  |L2.84|
                          DCD      req_type
                  |L2.88|
                          DCD      bRequest
                  |L2.92|
                          DCD      StandardDeviceRequest
                  |L2.96|
                          DCD      req_dir

                          AREA ||i.ctrl_in_token_handle||, CODE, READONLY, ALIGN=2

                  ctrl_in_token_handle PROC
;;;152    
;;;153    void ctrl_in_token_handle( void)
000000  b510              PUSH     {r4,lr}
;;;154    {
;;;155        
;;;156        if(req_dir==USB_REQ_DIR_IN)									// data stage when control read
000002  4805              LDR      r0,|L3.24|
000004  7800              LDRB     r0,[r0,#0]  ; req_dir
000006  2880              CMP      r0,#0x80
000008  d102              BNE      |L3.16|
;;;157        {
;;;158            ctrl_deal_handle();
00000a  f7fffffe          BL       ctrl_deal_handle
00000e  e001              B        |L3.20|
                  |L3.16|
;;;159        }else 														//status stage when control write (like setAddress) or no-data control
;;;160        {
;;;161            EP0_Send_Empty_Packet();
000010  f7fffffe          BL       EP0_Send_Empty_Packet
                  |L3.20|
;;;162        }
;;;163        
;;;164    }
000014  bd10              POP      {r4,pc}
;;;165    
                          ENDP

000016  0000              DCW      0x0000
                  |L3.24|
                          DCD      req_dir

                          AREA ||i.ctrl_out_handle||, CODE, READONLY, ALIGN=2

                  ctrl_out_handle PROC
;;;165    
;;;166    void ctrl_out_handle( void) 
000000  b510              PUSH     {r4,lr}
;;;167    {
;;;168        
;;;169        if(req_dir==USB_REQ_DIR_OUT)								//data stage when control write
000002  4803              LDR      r0,|L4.16|
000004  7800              LDRB     r0,[r0,#0]  ; req_dir
000006  b908              CBNZ     r0,|L4.12|
;;;170        {
;;;171            
;;;172            ctrl_deal_handle();
000008  f7fffffe          BL       ctrl_deal_handle
                  |L4.12|
;;;173        }
;;;174        else 														// status stage when control read, IP will send ack auto
;;;175        {
;;;176            
;;;177        }
;;;178    }
00000c  bd10              POP      {r4,pc}
;;;179    
                          ENDP

00000e  0000              DCW      0x0000
                  |L4.16|
                          DCD      req_dir

                          AREA ||i.usb_reset_handle||, CODE, READONLY, ALIGN=2

                  usb_reset_handle PROC
;;;238    }
;;;239    void usb_reset_handle(void)
000000  b510              PUSH     {r4,lr}
;;;240    {
;;;241        uint32 val;
;;;242        val = val;
000002  bf00              NOP      
;;;243        USB_Init();
000004  f7fffffe          BL       USB_Init
;;;244        
;;;245        val = USB->rTOP;
000008  4802              LDR      r0,|L5.20|
00000a  6804              LDR      r4,[r0,#0]
;;;246        usb_state = USB_STATE_DEFAULT;
00000c  2002              MOVS     r0,#2
00000e  4902              LDR      r1,|L5.24|
000010  7008              STRB     r0,[r1,#0]
;;;247    #ifdef printf
;;;248        printf("USB Reset 0x%lx\r\n",val);
;;;249    #endif
;;;250    }
000012  bd10              POP      {r4,pc}
;;;251    void usb_suspend_handle(void)
                          ENDP

                  |L5.20|
                          DCD      0x40005c00
                  |L5.24|
                          DCD      usb_state

                          AREA ||i.usb_resume_handle||, CODE, READONLY, ALIGN=2

                  usb_resume_handle PROC
;;;275    
;;;276    void usb_resume_handle(void)
000000  bf00              NOP      
;;;277    {
;;;278        uint32 val;
;;;279        val = val;
;;;280        
;;;281        val = USB->rTOP;
000002  4901              LDR      r1,|L6.8|
000004  6808              LDR      r0,[r1,#0]
;;;282    #ifdef printf
;;;283        printf("USB got resume 0x%lx\r\n",val);
;;;284    #endif
;;;285    }
000006  4770              BX       lr
;;;286    
                          ENDP

                  |L6.8|
                          DCD      0x40005c00

                          AREA ||i.usb_setup_handle||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  usb_setup_handle PROC
;;;50     
;;;51     void usb_setup_handle( void)
000000  b570              PUSH     {r4-r6,lr}
;;;52     {
;;;53         uint8    temp ;
;;;54         u8 i ; 
;;;55         if(usb_running_ctrl_state==USB_IDLE)
000002  4830              LDR      r0,|L7.196|
000004  7800              LDRB     r0,[r0,#0]  ; usb_running_ctrl_state
000006  28ff              CMP      r0,#0xff
000008  d159              BNE      |L7.190|
;;;56         {
;;;57             //bmrequest type one byte
;;;58             
;;;59             bmRequestType = USB->rSETUP[0];
00000a  482f              LDR      r0,|L7.200|
00000c  6800              LDR      r0,[r0,#0]
00000e  492f              LDR      r1,|L7.204|
000010  7008              STRB     r0,[r1,#0]
;;;60             //brequest one byte
;;;61             
;;;62             bRequest = USB->rSETUP[1];
000012  482d              LDR      r0,|L7.200|
000014  1d00              ADDS     r0,r0,#4
000016  6800              LDR      r0,[r0,#0]
000018  492d              LDR      r1,|L7.208|
00001a  7008              STRB     r0,[r1,#0]
;;;63             //wvalue two bytes
;;;64             
;;;65             temp = USB->rSETUP[2];
00001c  482a              LDR      r0,|L7.200|
00001e  3008              ADDS     r0,r0,#8
000020  6800              LDR      r0,[r0,#0]
000022  b2c5              UXTB     r5,r0
;;;66             
;;;67             wValue = USB->rSETUP[3];
000024  4828              LDR      r0,|L7.200|
000026  300c              ADDS     r0,r0,#0xc
000028  6800              LDR      r0,[r0,#0]
00002a  492a              LDR      r1,|L7.212|
00002c  8008              STRH     r0,[r1,#0]
;;;68             wValue = (wValue<<8) + temp;
00002e  4608              MOV      r0,r1
000030  8800              LDRH     r0,[r0,#0]  ; wValue
000032  eb052000          ADD      r0,r5,r0,LSL #8
000036  8008              STRH     r0,[r1,#0]
;;;69             //windex two bytes
;;;70             
;;;71             temp = USB->rSETUP[4];
000038  4823              LDR      r0,|L7.200|
00003a  3010              ADDS     r0,r0,#0x10
00003c  6800              LDR      r0,[r0,#0]
00003e  b2c5              UXTB     r5,r0
;;;72             
;;;73             
;;;74             wIndex = USB->rSETUP[5];
000040  4821              LDR      r0,|L7.200|
000042  3014              ADDS     r0,r0,#0x14
000044  6800              LDR      r0,[r0,#0]
000046  4924              LDR      r1,|L7.216|
000048  8008              STRH     r0,[r1,#0]
;;;75             
;;;76             wIndex = (wIndex<<8) + temp;
00004a  4608              MOV      r0,r1
00004c  8800              LDRH     r0,[r0,#0]  ; wIndex
00004e  eb052000          ADD      r0,r5,r0,LSL #8
000052  8008              STRH     r0,[r1,#0]
;;;77             //wlength two bytes
;;;78             
;;;79             temp = USB->rSETUP[6];
000054  481c              LDR      r0,|L7.200|
000056  3018              ADDS     r0,r0,#0x18
000058  6800              LDR      r0,[r0,#0]
00005a  b2c5              UXTB     r5,r0
;;;80             
;;;81             wLength = USB->rSETUP[7];
00005c  481a              LDR      r0,|L7.200|
00005e  301c              ADDS     r0,r0,#0x1c
000060  6800              LDR      r0,[r0,#0]
000062  491e              LDR      r1,|L7.220|
000064  8008              STRH     r0,[r1,#0]
;;;82             wLength = (wLength<<8) + temp;
000066  4608              MOV      r0,r1
000068  8800              LDRH     r0,[r0,#0]  ; wLength
00006a  eb052000          ADD      r0,r5,r0,LSL #8
00006e  8008              STRH     r0,[r1,#0]
;;;83             //direction
;;;84             req_dir = bmRequestType & USB_REQ_DIR_MASK ;
000070  4816              LDR      r0,|L7.204|
000072  7800              LDRB     r0,[r0,#0]  ; bmRequestType
000074  f0000080          AND      r0,r0,#0x80
000078  4919              LDR      r1,|L7.224|
00007a  7008              STRB     r0,[r1,#0]
;;;85             //recipient
;;;86             req_recip = bmRequestType & USB_REQ_RECIP_MASK ;
00007c  4813              LDR      r0,|L7.204|
00007e  7800              LDRB     r0,[r0,#0]  ; bmRequestType
000080  f000001f          AND      r0,r0,#0x1f
000084  4917              LDR      r1,|L7.228|
000086  7008              STRB     r0,[r1,#0]
;;;87             //type
;;;88             req_type = bmRequestType & USB_REQ_TYPE_MASK ;
000088  4810              LDR      r0,|L7.204|
00008a  7800              LDRB     r0,[r0,#0]  ; bmRequestType
00008c  f0000060          AND      r0,r0,#0x60
000090  4915              LDR      r1,|L7.232|
000092  7008              STRB     r0,[r1,#0]
;;;89             //#ifdef printf
;;;90             
;;;91             printf("接收set up数据：");
000094  a015              ADR      r0,|L7.236|
000096  f7fffffe          BL       __2printf
;;;92             
;;;93             for(i = 0;i < 8 ;i ++)
00009a  2400              MOVS     r4,#0
00009c  e007              B        |L7.174|
                  |L7.158|
;;;94             {
;;;95                 
;;;96                 printf("%x ",USB->rSETUP[i]);
00009e  480a              LDR      r0,|L7.200|
0000a0  f8501024          LDR      r1,[r0,r4,LSL #2]
0000a4  a016              ADR      r0,|L7.256|
0000a6  f7fffffe          BL       __2printf
0000aa  1c60              ADDS     r0,r4,#1              ;93
0000ac  b2c4              UXTB     r4,r0                 ;93
                  |L7.174|
0000ae  2c08              CMP      r4,#8                 ;93
0000b0  dbf5              BLT      |L7.158|
;;;97             }
;;;98             printf("\r\n");
0000b2  a014              ADR      r0,|L7.260|
0000b4  f7fffffe          BL       __2printf
;;;99             //#endif
;;;100    #if 0
;;;101            printf("bmRequestType = 0x%x\r\n",bmRequestType);
;;;102            printf("bRequest = 0x%x\r\n",bRequest);
;;;103            printf("wValue = 0x%x\r\n",wValue);
;;;104            printf("wIndex = 0x%x\r\n",wIndex);
;;;105            printf("wLength = 0x%x\r\n",wLength);
;;;106    #endif	
;;;107            
;;;108            usb_running_ctrl_state = USB_CTRL_SETUP ;
0000b8  2000              MOVS     r0,#0
0000ba  4902              LDR      r1,|L7.196|
0000bc  7008              STRB     r0,[r1,#0]
                  |L7.190|
;;;109        }
;;;110        ctrl_deal_handle();
0000be  f7fffffe          BL       ctrl_deal_handle
;;;111    }
0000c2  bd70              POP      {r4-r6,pc}
;;;112    
                          ENDP

                  |L7.196|
                          DCD      usb_running_ctrl_state
                  |L7.200|
                          DCD      0x40005c80
                  |L7.204|
                          DCD      bmRequestType
                  |L7.208|
                          DCD      bRequest
                  |L7.212|
                          DCD      wValue
                  |L7.216|
                          DCD      wIndex
                  |L7.220|
                          DCD      wLength
                  |L7.224|
                          DCD      req_dir
                  |L7.228|
                          DCD      req_recip
                  |L7.232|
                          DCD      req_type
                  |L7.236|
0000ec  bdd3cad5          DCB      189,211,202,213,"set up",202,253,190,221,163,186,0
0000f0  73657420
0000f4  7570cafd
0000f8  bedda3ba
0000fc  00      
0000fd  00                DCB      0
0000fe  00                DCB      0
0000ff  00                DCB      0
                  |L7.256|
000100  25782000          DCB      "%x ",0
                  |L7.260|
000104  0d0a00            DCB      "\r\n",0
000107  00                DCB      0

                          AREA ||i.usb_suspend_handle||, CODE, READONLY, ALIGN=2

                  usb_suspend_handle PROC
;;;250    }
;;;251    void usb_suspend_handle(void)
000000  b510              PUSH     {r4,lr}
;;;252    {	
;;;253        uint32 val;
;;;254        val = val;
000002  bf00              NOP      
;;;255        if(usb_state > USB_STATE_ADDRESS)//note it
000004  4809              LDR      r0,|L8.44|
000006  7800              LDRB     r0,[r0,#0]  ; usb_state
000008  2803              CMP      r0,#3
00000a  dd0d              BLE      |L8.40|
;;;256        {	
;;;257            USB->rPOWER = USB_POWER_SUSPEN; //enter suspend state, will shutdown phy clock
00000c  2001              MOVS     r0,#1
00000e  4908              LDR      r1,|L8.48|
000010  6008              STR      r0,[r1,#0]
;;;258            val = USB->rTOP;
000012  4808              LDR      r0,|L8.52|
000014  6804              LDR      r4,[r0,#0]
;;;259    #ifdef printf
;;;260            printf("USB enter suspend 0x%lx\r\n",val);
;;;261    #endif
;;;262            /***************JUST FOR RESUME TEST START*******************/
;;;263            usb_delay1ms(10000);//10s
000016  f2427010          MOV      r0,#0x2710
00001a  f7fffffe          BL       usb_delay1ms
;;;264    #ifdef printf
;;;265            printf("USB timeout, wakeup now!\r\n");
;;;266    #endif
;;;267            usb_wakeup_handle();
00001e  f7fffffe          BL       usb_wakeup_handle
;;;268    #ifdef printf
;;;269            printf("USB exit suspend\r\n");
;;;270    #endif
;;;271            /***************JUST FOR RESUME TEST END*********************/
;;;272            usb_state = USB_STATE_SUSPENDED;
000022  2005              MOVS     r0,#5
000024  4901              LDR      r1,|L8.44|
000026  7008              STRB     r0,[r1,#0]
                  |L8.40|
;;;273        }
;;;274    }
000028  bd10              POP      {r4,pc}
;;;275    
                          ENDP

00002a  0000              DCW      0x0000
                  |L8.44|
                          DCD      usb_state
                  |L8.48|
                          DCD      0x40005dc0
                  |L8.52|
                          DCD      0x40005c00

                          AREA ||i.usb_wakeup_handle||, CODE, READONLY, ALIGN=2

                  usb_wakeup_handle PROC
;;;286    
;;;287    void usb_wakeup_handle(void)
000000  b510              PUSH     {r4,lr}
;;;288    {
;;;289        uint32 val;
;;;290        val = val;
000002  bf00              NOP      
;;;291        
;;;292        val = USB->rTOP;
000004  4809              LDR      r0,|L9.44|
000006  6804              LDR      r4,[r0,#0]
;;;293    #ifdef printf
;;;294        printf("USB before wakeup 0x%lx\r\n",val);
;;;295    #endif
;;;296        
;;;297        USB->rPOWER = USB_POWER_SUSPEN|USB_POWER_SUSP;//进入工作模式
000008  2003              MOVS     r0,#3
00000a  4909              LDR      r1,|L9.48|
00000c  6008              STR      r0,[r1,#0]
;;;298        USB->rPOWER = USB_POWER_WKUP|USB_POWER_SUSPEN|USB_POWER_SUSP;//唤醒
00000e  200b              MOVS     r0,#0xb
000010  6008              STR      r0,[r1,#0]
;;;299        usb_delay1ms(3);											//3ms wait bus wakeup
000012  2003              MOVS     r0,#3
000014  f7fffffe          BL       usb_delay1ms
;;;300        
;;;301        USB->rPOWER = USB_POWER_SUSPEN|USB_POWER_SUSP;//进入工作模式
000018  2003              MOVS     r0,#3
00001a  4905              LDR      r1,|L9.48|
00001c  6008              STR      r0,[r1,#0]
;;;302        val = USB->rTOP;
00001e  4803              LDR      r0,|L9.44|
000020  6804              LDR      r4,[r0,#0]
;;;303        usb_state = USB_STATE_CONFIGURED;
000022  2004              MOVS     r0,#4
000024  4903              LDR      r1,|L9.52|
000026  7008              STRB     r0,[r1,#0]
;;;304    #ifdef printf
;;;305        printf("USB after wakeup 0x%lx\r\n",val);
;;;306    #endif
;;;307    }
000028  bd10              POP      {r4,pc}
;;;308    
                          ENDP

00002a  0000              DCW      0x0000
                  |L9.44|
                          DCD      0x40005c00
                  |L9.48|
                          DCD      0x40005dc0
                  |L9.52|
                          DCD      usb_state

                          AREA ||.data||, DATA, ALIGN=2

                  usb_running_state
000000  00                DCB      0x00
                  usb_running_ctrl_state
000001  00                DCB      0x00
                  bmRequestType
000002  00                DCB      0x00
                  bRequest
000003  00                DCB      0x00
                  wValue
000004  0000              DCB      0x00,0x00
                  wIndex
000006  0000              DCB      0x00,0x00
                  wLength
000008  0000              DCB      0x00,0x00
                  req_dir
00000a  00                DCB      0x00
                  req_type
00000b  00                DCB      0x00
                  req_recip
00000c  00000000          DCB      0x00,0x00,0x00,0x00
                  StandardDeviceRequest
                          DCD      Chap9_GetStatus
                          DCD      Chap9_ClearFeature
                          DCD      MLsup_StallEP0
                          DCD      Chap9_SetFeature
                          DCD      MLsup_StallEP1
                          DCD      Chap9_SetAddress
                          DCD      Chap9_GetDescriptor
                          DCD      Chap9_SetDescriptor
                          DCD      Chap9_GetConfiguration
                          DCD      Chap9_SetConfiguration
                          DCD      Chap9_GetInterface
                          DCD      Chap9_SetInterface
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\bsp\\usblib\\ctrlusb.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_ctrlusb_c_88d4429d____REV16|
#line 129 "..\\..\\..\\..\\..\\Device\\CMSIS\\KEIL_CORE\\core_cmInstr.h"
|__asm___9_ctrlusb_c_88d4429d____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_ctrlusb_c_88d4429d____REVSH|
#line 144
|__asm___9_ctrlusb_c_88d4429d____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___9_ctrlusb_c_88d4429d____RRX|
#line 300
|__asm___9_ctrlusb_c_88d4429d____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
