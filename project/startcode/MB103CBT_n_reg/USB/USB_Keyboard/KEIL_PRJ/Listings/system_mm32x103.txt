; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\system_mm32x103.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\system_mm32x103.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\bsp -I..\bsp\test -I..\bsp\usblib -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\uart -I..\..\..\..\..\Device\MM32x103\Include -I..\HARDWARE\KEY -I..\..\..\..\..\Device\CMSIS\KEIL_CORE -IC:\Users\sjh\Desktop\miniboardstartkit_v1.5\3-Sample_Code\MM32F103RegLibCB_MB_V1.8.0\Boards_MM32x103\MB103CBT6_reg\USB\USB_Keyboard\KEIL_PRJ\RTE -IC:\Keil_v5\ARM\PACK\MindMotion\MM32x103_DFP\1.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DMM32x103_MD --omf_browse=.\objects\system_mm32x103.crf ..\..\..\..\..\Device\MM32x103\Source\system_MM32x103.c]
                          THUMB

                          AREA ||i.SetSysClock||, CODE, READONLY, ALIGN=1

                  SetSysClock PROC
;;;221    */
;;;222    static void SetSysClock(void)
000000  b510              PUSH     {r4,lr}
;;;223    {
;;;224    #ifdef SYSCLK_FREQ_HSE
;;;225      SetSysClockToHSE();
;;;226    #elif defined SYSCLK_FREQ_24MHz
;;;227      SetSysClockTo24();
;;;228    #elif defined SYSCLK_FREQ_36MHz
;;;229      SetSysClockTo36();
;;;230    #elif defined SYSCLK_FREQ_48MHz
;;;231      SetSysClockTo48();
;;;232    #elif defined SYSCLK_FREQ_56MHz
;;;233      SetSysClockTo56();  
;;;234    #elif defined SYSCLK_FREQ_72MHz
;;;235      SetSysClockTo72();
;;;236    #elif defined SYSCLK_FREQ_96MHz
;;;237      SetSysClockTo96();
;;;238      
;;;239    #elif defined SYSCLK_HSI_48MHz
;;;240      SetSysClockTo48_HSI();
;;;241    #elif defined SYSCLK_HSI_72MHz
;;;242      SetSysClockTo72_HSI();
;;;243    #elif defined SYSCLK_HSI_96MHz
;;;244      SetSysClockTo96_HSI();
000002  f7fffffe          BL       SetSysClockTo96_HSI
;;;245    #endif
;;;246      
;;;247      /* If none of the define above is enabled, the HSI is used as System clock
;;;248      source (default after reset) */ 
;;;249    }
000006  bd10              POP      {r4,pc}
;;;250    
                          ENDP


                          AREA ||i.SetSysClockTo96_HSI||, CODE, READONLY, ALIGN=2

                  SetSysClockTo96_HSI PROC
;;;846    #elif defined SYSCLK_HSI_96MHz
;;;847    void SetSysClockTo96_HSI()
000000  2000              MOVS     r0,#0
;;;848    {
;;;849      unsigned char temp=0;   
;;;850      RCC->CR|=RCC_CR_HSION;  
000002  4925              LDR      r1,|L2.152|
000004  6809              LDR      r1,[r1,#0]
000006  f0410101          ORR      r1,r1,#1
00000a  4a23              LDR      r2,|L2.152|
00000c  6011              STR      r1,[r2,#0]
;;;851      while(!(RCC->CR&RCC_CR_HSIRDY));
00000e  bf00              NOP      
                  |L2.16|
000010  4921              LDR      r1,|L2.152|
000012  6809              LDR      r1,[r1,#0]
000014  f0010102          AND      r1,r1,#2
000018  2900              CMP      r1,#0
00001a  d0f9              BEQ      |L2.16|
;;;852      RCC->CFGR=RCC_CFGR_PPRE1_2; //APB1=DIV2;APB2=DIV1;AHB=DIV1;
00001c  f44f6180          MOV      r1,#0x400
000020  4a1d              LDR      r2,|L2.152|
000022  6051              STR      r1,[r2,#4]
;;;853      
;;;854      RCC->CFGR&=~RCC_CFGR_PLLSRC;	  //PLLSRC ON 
000024  4611              MOV      r1,r2
000026  6849              LDR      r1,[r1,#4]
000028  f4213180          BIC      r1,r1,#0x10000
00002c  6051              STR      r1,[r2,#4]
;;;855      
;;;856      RCC->CR &=~(RCC_CR_PLLON);		//清PLL//	RCC->CR &=~(7<<20);		//清PLL
00002e  4611              MOV      r1,r2
000030  6809              LDR      r1,[r1,#0]
000032  f0217180          BIC      r1,r1,#0x1000000
000036  6011              STR      r1,[r2,#0]
;;;857      
;;;858      RCC->CR &=~(0x1f<<26);	
000038  4611              MOV      r1,r2
00003a  6809              LDR      r1,[r1,#0]
00003c  f02141f8          BIC      r1,r1,#0x7c000000
000040  6011              STR      r1,[r2,#0]
;;;859      RCC->CR|=(8 - 1) << 26;   //设置PLL值 2~16
000042  4611              MOV      r1,r2
000044  6809              LDR      r1,[r1,#0]
000046  f04151e0          ORR      r1,r1,#0x1c000000
00004a  6011              STR      r1,[r2,#0]
;;;860      
;;;861      FLASH->ACR=FLASH_ACR_LATENCY_1|FLASH_ACR_LATENCY_0|FLASH_ACR_PRFTBE;	  //FLASH 2个延时周期
00004c  2113              MOVS     r1,#0x13
00004e  4a13              LDR      r2,|L2.156|
000050  6011              STR      r1,[r2,#0]
;;;862      
;;;863      RCC->CR|=RCC_CR_PLLON;  //PLLON
000052  4911              LDR      r1,|L2.152|
000054  6809              LDR      r1,[r1,#0]
000056  f0417180          ORR      r1,r1,#0x1000000
00005a  4a0f              LDR      r2,|L2.152|
00005c  6011              STR      r1,[r2,#0]
;;;864      while(!(RCC->CR&RCC_CR_PLLRDY));//等待PLL锁定
00005e  bf00              NOP      
                  |L2.96|
000060  490d              LDR      r1,|L2.152|
000062  6809              LDR      r1,[r1,#0]
000064  f0017100          AND      r1,r1,#0x2000000
000068  2900              CMP      r1,#0
00006a  d0f9              BEQ      |L2.96|
;;;865      RCC->CFGR&=~RCC_CFGR_SW;
00006c  490a              LDR      r1,|L2.152|
00006e  6849              LDR      r1,[r1,#4]
000070  f0210103          BIC      r1,r1,#3
000074  4a08              LDR      r2,|L2.152|
000076  6051              STR      r1,[r2,#4]
;;;866      RCC->CFGR|=RCC_CFGR_SW_PLL;//PLL作为系统时钟	 
000078  4611              MOV      r1,r2
00007a  6849              LDR      r1,[r1,#4]
00007c  f0410102          ORR      r1,r1,#2
000080  6051              STR      r1,[r2,#4]
;;;867      while(temp!=0x02)     //等待PLL作为系统时钟设置成功
000082  e005              B        |L2.144|
                  |L2.132|
;;;868      {    
;;;869        temp=RCC->CFGR>>2;
000084  4904              LDR      r1,|L2.152|
000086  6849              LDR      r1,[r1,#4]
000088  f3c10087          UBFX     r0,r1,#2,#8
;;;870        temp&=0x03;
00008c  f0000003          AND      r0,r0,#3
                  |L2.144|
000090  2802              CMP      r0,#2                 ;867
000092  d1f7              BNE      |L2.132|
;;;871      } 
;;;872    }	
000094  4770              BX       lr
;;;873    #endif
                          ENDP

000096  0000              DCW      0x0000
                  |L2.152|
                          DCD      0x40021000
                  |L2.156|
                          DCD      0x40022000

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;183    */
;;;184    void SystemInit (void)
000000  b510              PUSH     {r4,lr}
;;;185    {
;;;186      /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
;;;187      /* Set HSION bit */
;;;188      RCC->CR |= (uint32_t)0x00000001;
000002  4815              LDR      r0,|L3.88|
000004  6800              LDR      r0,[r0,#0]
000006  f0400001          ORR      r0,r0,#1
00000a  4913              LDR      r1,|L3.88|
00000c  6008              STR      r0,[r1,#0]
;;;189      
;;;190      /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
;;;191      RCC->CFGR &= (uint32_t)0xF0FF0000;
00000e  4608              MOV      r0,r1
000010  6840              LDR      r0,[r0,#4]
000012  4912              LDR      r1,|L3.92|
000014  4008              ANDS     r0,r0,r1
000016  4910              LDR      r1,|L3.88|
000018  6048              STR      r0,[r1,#4]
;;;192      
;;;193      /* Reset HSEON, CSSON and PLLON bits */
;;;194      RCC->CR &= (uint32_t)0xFEF6FFFF;
00001a  4608              MOV      r0,r1
00001c  6800              LDR      r0,[r0,#0]
00001e  4910              LDR      r1,|L3.96|
000020  4008              ANDS     r0,r0,r1
000022  490d              LDR      r1,|L3.88|
000024  6008              STR      r0,[r1,#0]
;;;195      
;;;196      /* Reset HSEBYP bit */
;;;197      RCC->CR &= (uint32_t)0xFFFBFFFF;
000026  4608              MOV      r0,r1
000028  6800              LDR      r0,[r0,#0]
00002a  f4202080          BIC      r0,r0,#0x40000
00002e  6008              STR      r0,[r1,#0]
;;;198      
;;;199      /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
;;;200      RCC->CFGR &= (uint32_t)0xFF80FFFF;
000030  4608              MOV      r0,r1
000032  6840              LDR      r0,[r0,#4]
000034  f42000fe          BIC      r0,r0,#0x7f0000
000038  6048              STR      r0,[r1,#4]
;;;201      RCC->CR &= (uint32_t)0x000FFFFF;
00003a  4608              MOV      r0,r1
00003c  6800              LDR      r0,[r0,#0]
00003e  f3c00013          UBFX     r0,r0,#0,#20
000042  6008              STR      r0,[r1,#0]
;;;202      
;;;203      /* Disable all interrupts and clear pending bits  */
;;;204      RCC->CIR = 0x009F0000;
000044  f44f001f          MOV      r0,#0x9f0000
000048  6088              STR      r0,[r1,#8]
;;;205      
;;;206      /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
;;;207      /* Configure the Flash Latency cycles and enable prefetch buffer */
;;;208      SetSysClock();
00004a  f7fffffe          BL       SetSysClock
;;;209      
;;;210    #ifdef VECT_TAB_SRAM
;;;211      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
;;;212    #else
;;;213      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
00004e  f04f6000          MOV      r0,#0x8000000
000052  4904              LDR      r1,|L3.100|
000054  6008              STR      r0,[r1,#0]
;;;214    #endif 
;;;215    }
000056  bd10              POP      {r4,pc}
;;;216    
                          ENDP

                  |L3.88|
                          DCD      0x40021000
                  |L3.92|
                          DCD      0xf0ff0000
                  |L3.96|
                          DCD      0xfef6ffff
                  |L3.100|
                          DCD      0xe000ed08

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x05b8d800
                  AHBPrescTable
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  01020304          DCB      0x01,0x02,0x03,0x04
000010  06070809          DCB      0x06,0x07,0x08,0x09

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\Device\\MM32x103\\Source\\system_MM32x103.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_system_MM32x103_c_5d646a67____REV16|
#line 129 "..\\..\\..\\..\\..\\Device\\CMSIS\\KEIL_CORE\\core_cmInstr.h"
|__asm___17_system_MM32x103_c_5d646a67____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_system_MM32x103_c_5d646a67____REVSH|
#line 144
|__asm___17_system_MM32x103_c_5d646a67____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___17_system_MM32x103_c_5d646a67____RRX|
#line 300
|__asm___17_system_MM32x103_c_5d646a67____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
